---
--- Generated by Luanalysis
--- Created by swift.
--- DateTime: 3/15/25 12:19
---


a = "all"
global = {
    --- default: b, privileged: c
    --- structure? - resources - free for all, there is a hole on the wall
    ---
    --- managed obj
    --- This way is pretty much brute force, keep a table for each object it's managing?
    --- that shit does not scale pretty.
    --- how about a meta table? No no, that way we are doing things on object
    --- what we want is a _G that reacts differently in
    ---

    default = {
        item1 = 1,
        item2 = 2
    },


    priviledged = {
        p1 = "p1",
        p2 = "p2"
    }
}

-- nah, this way aint gonna work.
-- the thing I developed, now comes in handy
-- jack in the box
-- that's actually maybe the only way it will work
-- this way, when the code inside is running, obj inside is not ocaped
-- but, require will still be here, and that's why


mt = {
    __call = function(self, input)
        print(input)
        print("from call")
    end

    --__index =
    --    print
    --
}

setmetatable(global, mt)


print(global['a'])

-- end result is different object access this table get different things

